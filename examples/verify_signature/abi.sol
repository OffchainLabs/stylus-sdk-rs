/**
 * This file was automatically generated by Stylus and represents a Rust program.
 * For more information, please see [The Stylus SDK](https://github.com/OffchainLabs/stylus-sdk-rs).
 */

// SPDX-License-Identifier: MIT-OR-APACHE-2.0
pragma solidity ^0.8.23;

interface IVerifySignature  {
    function getMessageHash(address to, uint256 amount, string calldata message, uint256 nonce) external view returns (bytes32);

    function getEthSignedMessageHash(bytes32 message_hash) external view returns (bytes32);

    function verify(address signer, address to, uint256 amount, string calldata message, uint256 nonce, bytes calldata signature) external view returns (bool);

    function recoverSigner(bytes32 eth_signed_message_hash, bytes calldata signature) external view returns (address);

    function ecrecoverCall(bytes32 hash, uint8 v, bytes32 r, bytes32 s) external view returns (address);

    function splitSignature(bytes calldata signature) external view returns (bytes32, bytes32, uint8);

    error EcrecoverCallError();

    error InvalidSignatureLength();
}
